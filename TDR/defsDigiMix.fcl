// Andrei Gaponenko, 2014

#include "minimalMessageService.fcl"
#include "standardProducers.fcl"
#include "standardServices.fcl"

# Give this job a name.

source : { module_type : RootInput }

services : {

    message               : @local::default_message
    TFileService          : { fileName : @nil }
    RandomNumberGenerator : { }

    user : {
        GeometryService        : { inputFile      : "JobConfig/TDR/geom_MothersToHits.txt" }
        ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt"      }
        GlobalConstantsService : { inputFile      : "Mu2eG4/test/globalConstants_01.txt" }
        G4Helper               : { }
        SeedService            : @local::automaticSeeds
    }
}

physics : {

    //================================================================
    producers: {

        generate: {
            module_type: StoppedParticleReactionGun
	    verbosityLevel : 1

            physics: @nil

            muonStops : {
                inputFiles: @nil // use --fclinput for grid submission
                averageNumRecordsToUse: 500000
                treeName: "stoppedMuonDumper/stops"
                branchName : "stops"
                verbosityLevel : 1
            }
        }

        g4run : {
            module_type          : G4
            simParticleNumberOffset : 0
            generatorModuleLabel : "generate"
            doWriteLegacyPhysVolumeInfo : false
            SDConfig : {
                // do not want e.g. the "stoppingtarget" SD, thus do not use enableAllSDs
                // Instead explicitly list all the detectors we want
                enableSD : [ tracker, calorimeter, calorimeterRO, virtualdetector ]
                sensitiveVolumes: []
            }

            SimParticlePrinter : {
                enabled : false
                primariesOnly : false
                prefix : "SimParticle: "
            }
        }

        compressPVDetector: {
            module_type: CompressPhysicalVolumes
            volumesInput : "g4run"
            hitInputs : []
            particleInputs : [ "g4run" ]
        }

        protonTimeMap: { module_type : GenerateProtonTimes }
        muonTimeMap: { module_type : GenerateMuonLife }
        makeSD: @local::makeSD
        makeSH: @local::makeSHfromSD

    } // producers

    //================================================================
    filters: {
        // Reject events with no hits from signal-like tracks 
        // in the detectors.  The filter does not look at the
        // background hits from mixed events.
        detectorFilter: {
            module_type: FilterStepPointMomentum
            inputs: [ "g4run:tracker", "g4run:calorimeter", "g4run:calorimeterRO"]
            cutMomentumMin : 10. // MeV/c
        }
    }

    //================================================================
    analyzers: {
        genCountLogger: {
            module_type: GenEventCountReader
        }
        gpa: {
            module_type: GenParticlesAnalyzer
            inputs: generate
        }
    }

    //================================================================
    detPath : [generate, g4run, detectorFilter, compressPVDetector, protonTimeMap, muonTimeMap, makeSD, makeSH]
    trigger_paths  : [detPath]

    out : [detectorOutput]
    an : [genCountLogger, gpa]
    end_paths      : [out, an]
}

outputs: {
    detectorOutput : {
        module_type : RootOutput
        SelectEvents: { SelectEvents: [detPath] }
        outputCommands:   [ "keep *_*_*_*",
                            "drop uintmu2e::PhysicalVolumeInfomvstd::pairs_g4run_*_*"
                          ]
        fileName    : @nil
    }
}

// Apply the time offsets in tracker digitization
physics.producers.makeSD.TimeOffsets :  { inputs : [ "protonTimeMap", "muonTimeMap" ] }
