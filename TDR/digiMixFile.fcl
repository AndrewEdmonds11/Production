// Read an input file with StepPointMCs (usually for signal or signal-like tracks),
// overlay background hits using standard pre-mixed files, and produce tracker digits.
//
// To specify background hit files for grid submissions, add the
//
//     --fclinput=1:@bgHitFiles:/mu2e/data/tdr/beam/mixp3/filelist.txt
//
// option to mu2eart command line.  For interactive tests, uncomment the
// following PROLOG definition of bgHitFiles.  DO NOT LEAVE IT UNCOMMENTED, as it 
// will cause grid jobs to silently use the same file over and over again.
//
// Andrei Gaponenko, 2014

//test: // This must be commented out for production.
//test: BEGIN_PROLOG
//test: bgHitFiles : [ "/mu2e/data/tdr/beam/mixp3/tdr.beam.mix.bg.1516a.15409268/good/00000/data_mixBG.root"]
//test: END_PROLOG

#include "minimalMessageService.fcl"
#include "standardProducers.fcl"
#include "standardServices.fcl"

BEGIN_PROLOG
mixerTemplate: {
    module_type         : MixMCEvents
    fileNames           : @local::bgHitFiles
    readMode            : randomReplace
    wrapFiles           : true
    coverageFraction    : 1000000.
    detail : {
        mean                : -1
        genModuleLabel      : @nil
        g4ModuleLabel       : @nil
        g4StatusTag         : ""
        stepInstanceNames   : @local::stepInstanceNames
        doPointTrajectories : false
    }
}
END_PROLOG

process_name: digiMixFile

source: { module_type: RootInput }

services : {
    message: @local::default_message
    TFileService: { fileName : "hist_digiMixFile.root" }
    RandomNumberGenerator: { }
    user: {
        GeometryService        : { inputFile      : "JobConfig/TDR/geom_MothersToHits.txt" }
        ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt"      }
        GlobalConstantsService : { inputFile      : "Mu2eG4/test/globalConstants_01.txt" }
        SeedService: @local::automaticSeeds
    }
}

physics: {

    filters: {
        flashMixer   : @local::mixerTemplate
	ootMixer     : @local::mixerTemplate
	dioMixer     : @local::mixerTemplate
	neutronMixer : @local::mixerTemplate
	photonMixer  : @local::mixerTemplate
	protonMixer  : @local::mixerTemplate
    }

    producers: {
        protonTimeMap: { module_type : GenerateProtonTimes }
        muonTimeMap: { module_type : GenerateMuonLife }
        makeSD: @local::makeSD
        makeSH: @local::makeSHfromSD
    }

    analyzers: {
        genCountLogger: { module_type: GenEventCountReader }
    }

    p1: [
         dioMixer, protonMixer, neutronMixer, photonMixer, ootMixer, flashMixer,
	 protonTimeMap, muonTimeMap, makeSD, makeSH
    ]

    trigger_paths: [p1]

    out: [ genCountLogger, fullOutput ]
    end_paths: [out]
}

outputs: {
    fullOutput : {
        module_type : RootOutput
        fileName    : "data_mixBG.root"
    }
}

// Apply the time offsets in tracker digitization
physics.producers.makeSD.TimeOffsets :  { inputs : [ "protonTimeMap", "muonTimeMap" ] }

physics.filters.flashMixer.detail.genModuleLabel   :  flashMixer 
physics.filters.ootMixer.detail.genModuleLabel     :  ootMixer
physics.filters.dioMixer.detail.genModuleLabel     :  dioMixer
physics.filters.neutronMixer.detail.genModuleLabel :  neutronMixer
physics.filters.photonMixer.detail.genModuleLabel  :  photonMixer
physics.filters.protonMixer.detail.genModuleLabel  :  protonMixer

physics.filters.flashMixer.detail.g4ModuleLabel   :  flashMixer 
physics.filters.ootMixer.detail.g4ModuleLabel     :  ootMixer
physics.filters.dioMixer.detail.g4ModuleLabel     :  dioMixer
physics.filters.neutronMixer.detail.g4ModuleLabel :  neutronMixer
physics.filters.photonMixer.detail.g4ModuleLabel  :  photonMixer
physics.filters.protonMixer.detail.g4ModuleLabel  :  protonMixer

services.SeedService.baseSeed         :  0
services.SeedService.maxUniqueEngines :  20
