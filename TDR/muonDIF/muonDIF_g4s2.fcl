// Andrei Gaponenko, 2014

#include "minimalMessageService.fcl"
#include "standardProducers.fcl"
#include "standardServices.fcl"

# Give this job a name.
process_name : muonDIFg4s2

source : { module_type : RootInput }

services : {

   message               : @local::default_message
   TFileService          : { fileName : "hist_muonDIF_g4s2.root" }
   RandomNumberGenerator : { }

   user : {
      GeometryService        : { inputFile      : "JobConfig/TDR/muonDIF/geom_muonDIF_g4s2.txt" }
      ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt"      }
      GlobalConstantsService : { inputFile      : "Mu2eG4/test/globalConstants_01.txt" }
      G4Helper               : { }
      SeedService            : @local::automaticSeeds
   }
}

physics : {
   producers: {

      g4run : {
         module_type          : G4
         inputSimParticles : "g4filter:s0"
         simParticleNumberOffset : 100000 // safe b/c of g4.particlesSizeLimit in stage1

         generatorModuleLabel : ""
         genInputHits : [ "g4filter:TS3Vacuum" ]

         doWriteLegacyPhysVolumeInfo : false
         inputPhysVolumeMultiInfoLabel : "compressPV"

         SDConfig : {
            enableSD : [ virtualdetector ] // activate just the explicitly listed SDs
            sensitiveVolumes: [ DS2Vacuum, DS3Vacuum ]
            preSimulatedHits: ["g4filter:virtualdetector",
               "g4filter:DS2Vacuum",
               "g4filter:DS3Vacuum"]
         }

         SimParticlePrinter : {
            enabled : false
            primariesOnly : false
            prefix : "SimParticle: "
         }
      }

      compressPVe : {
         module_type: CompressPhysicalVolumes
         volumesInput : "g4run"
         hitInputs : []
         particleInputs : [ "efilter:s0" ]
      }
      compressPVmu : {
         module_type: CompressPhysicalVolumes
         volumesInput : "g4run"
         hitInputs : []
         particleInputs : [ "mufilter:s0" ]
      }
   }

   filters: {
      ePreFilter: {
         module_type: FilterStepPointPDG
         inputs: [  "g4run:DS2Vacuum", "g4run:DS3Vacuum" ]
         pdgToKeep: [11]
      }
      efilter: {
         module_type: FilterG4Out
         mainHitInputs : [ "ePreFilter:DS2Vacuum", "ePreFilter:DS3Vacuum"]
         extraHitInputs : [ "g4run:virtualdetector" ]
         numSimParticleCollections : 1
         vetoDaughters: []
         compressGenParticles: true
      }

      muPreFilter: {
         module_type: FilterStepPointPDG
         inputs: [  "g4run:DS2Vacuum", "g4run:DS3Vacuum" ]
         pdgToKeep: [13]
      }
      mufilter: {
         module_type: FilterG4Out
         mainHitInputs : [ "muPreFilter:DS2Vacuum", "muPreFilter:DS3Vacuum"]
         extraHitInputs : [ "g4run:virtualdetector" ]
         numSimParticleCollections : 1
         vetoDaughters: []
         compressGenParticles: true
      }
   }

   analyzers: {
      genCountLogger: {
         module_type: GenEventCountReader
      }
   }

   epath : [g4run, ePreFilter, efilter, compressPVe]
   mupath : [g4run, muPreFilter, mufilter, compressPVmu]
   trigger_paths  : [epath, mupath]

   e1 : [eOutput, muOutput, genCountLogger]
   end_paths      : [e1]
}

outputs: {
   eOutput : {
      module_type : RootOutput
      SelectEvents: { SelectEvents: ["epath"] }
      outputCommands:   [ "drop *_*_*_*",
         "keep mu2e::GenEventCount_*_*_*",
         "keep mu2e::StatusG4_*_*_*",
         "keep *_efilter_*_*",
         "keep *_compressPVe_*_*"
      ]
      fileName    : "data_beame_g4s2.root"
   }

   muOutput : {
      module_type : RootOutput
      SelectEvents: { SelectEvents: ["mupath"] }
      outputCommands:   [ "drop *_*_*_*",
         "keep mu2e::GenEventCount_*_*_*",
         "keep mu2e::StatusG4_*_*_*",
         "keep *_mufilter_*_*",
         "keep *_g4filter_TS3Vacuum_*",
         "keep *_compressPVmu_*_*"
      ]
      fileName    : "data_muonDIF_g4s2.root"
   }
}

// Initialze seeding of random engines
services.user.SeedService.baseSeed         :  0
services.user.SeedService.maxUniqueEngines :  20
