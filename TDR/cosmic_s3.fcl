// Ralf Ehrlich, 2014

#include "minimalMessageService.fcl"
#include "standardProducers.fcl"
#include "standardServices.fcl"

# Give this job a name.
process_name : cosmics3

source : { module_type : RootInput }

services : {

    message               : @local::default_message
    TFileService          : { fileName : "hist_cosmic_stage3.root" }
    RandomNumberGenerator : { }

    user : {
        GeometryService        : { inputFile      : "JobConfig/TDR/geom_cosmic_s2.txt" }
        ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt"      }
        GlobalConstantsService : { inputFile      : "Mu2eG4/test/globalConstants_01.txt" }
        G4Helper               : { }
        SeedService            : @local::automaticSeeds
    }
}

physics : {
    producers: {
                  makeSD               : @local::makeSD
                  makeSH               : @local::makeSHfromSD
                  FSHPreStereo         : @local::FSHPreStereo
                  MakeStereoHits       : @local::MakeStereoHits
                  FlagStrawHits        : @local::FlagStrawHits
                  FlagBkgHits          : @local::FlagBkgHits
                  CaloReadoutHitsMaker : @local::CaloReadoutHitsMaker
                  CaloCrystalHitsMaker : @local::CaloCrystalHitsMaker
                  TrkPatRec            : @local::TrkPatRecDeM
    }

    filters: {
                  TrkPatRecFilter : 
                  {
                     module_type : TrkPatRecFilter
                     fitterModuleLabels : [ "TrkPatRec" ]
                     trkPatRecInstances : [ "DeM" ]
                     minMomentum :  50.0
                     maxMomentum : 200.0
                  }
    }

    analyzers: {
        genCountLogger: {
            module_type: GenEventCountReader
        }
    }

    trigFilter : [makeSD, makeSH, FSHPreStereo, MakeStereoHits, FlagStrawHits, FlagBkgHits, CaloReadoutHitsMaker, CaloCrystalHitsMaker, TrkPatRec, TrkPatRecFilter]
    trigger_paths  : [trigFilter]

    an: [genCountLogger]
    out: [filteredOutput]
    end_paths      : [an, out]
}

outputs: {
    filteredOutput : {
        module_type : RootOutput
        SelectEvents: { SelectEvents: ["trigFilter"] }
        outputCommands:   [ "keep *_*_*_*" ]
        fileName    : "data_cosmic_s3.root"
    }
}

// Initialze seeding of random engines: do not put these lines in base .fcl files for grid jobs.
services.SeedService.baseSeed         :  0
services.SeedService.maxUniqueEngines :  20

// We guarantee that our subruns are atomic. The following line is to not run out of memory.
services.scheduler.fileMode: MERGE
