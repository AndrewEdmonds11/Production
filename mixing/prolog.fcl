# common parts used in all mixing jobs

#include "JobConfig/beam/prolog.fcl"
#include "EventGenerator/fcl/prolog.fcl"
#include "CommonMC/fcl/prolog.fcl"
#include "TrackerMC/fcl/prolog.fcl"
#include "CaloMC/fcl/prolog.fcl"
#include "CRVResponse/fcl/prolog.fcl"

BEGIN_PROLOG

#----------------------------------------------------------------
mixerTemplateCommon: {
   module_type         : MixBackgroundFrames
   fileNames           : @nil
#     sequential -- read the secondary events in order
#     randomReplace -- random with replacement
#     randomLimReplace -- events unique within a primary event
#     randomNoReplace -- events guaranteed to be used once only.
#   readMode            : randomNoReplace
   readMode            : randomLimReplace
   wrapFiles           : true

   mu2e: {
      protonBunchIntensityTag: "protonBunchIntensity"
      meanEventsPerProton: @nil
      products: @nil
   }
}

#----------------------------------------------------------------
mixerTemplateTrkCal: @local::mixerTemplateCommon
mixerTemplateTrkCal.mu2e.products: {
   genParticleMixer: { mixingMap: [ [ "generate", "" ] ] }
   simParticleMixer: { mixingMap: [ [ "detectorFilter", "" ] ] }
   stepPointMCMixer: { mixingMap:
      [
	 [ "detectorFilter:tracker", ":" ],
	 [ "detectorFilter:virtualdetector", ":" ],
	 [ "detectorFilter:protonabsorber", ":" ]
      ]
   }
   caloShowerStepMixer: { mixingMap:
      [
	 [ "CaloShowerCrystalSteps", "calorimeter" ],
	 [ "CaloShowerROSteps", "calorimeterRO" ]
      ]
   }
}
#----------------------------------------------------------------
mixerTemplateCRV: @local::mixerTemplateCommon
mixerTemplateCRV.mu2e.products: {
   genParticleMixer: { mixingMap: [ [ "generate", "" ] ] }
   simParticleMixer: { mixingMap: [ [ "crvFilter", "" ] ] }
   stepPointMCMixer: { mixingMap:
      [
	 [ "crvFilter:CRV", ":" ]
      ]
   }
}
# flash cut configuration
CRVCut : { module_type : CompressStepPointMCs
	 			    stepPointMCTags : [ "crvFilter:CRV" ]
				    caloShowerStepTags : [ ]
				    simParticleTag : "crvFilter"
				    minTime : 350
				    maxTime : 1695
				    minEdep : 10.0e-6
				    maxEdep : 1.0e6
				    timeMapTags : [ "protonTimeMap" ]
				    diagLevel : 0
     				  }
# start by keeing the output of primary production (if present)
DigiCompressOutputCommands : [ "drop *_*_*_*",
    "keep *_compressDigiMCs_*_*",
    "keep mu2e::StrawDigis_*_*_*",
    "keep mu2e::CaloDigis_*_*_*",
#    "keep mu2e::CaloShowerSteps_*_*_*",
#    "keep mu2e::CaloShowerStepROs_*_*_*",
#    "keep mu2e::SimParticleart::Ptrs_CaloShowerStepFromStepPt_*_*",
#    "keep mu2e::CaloShowerSims_*_*_*",
    "keep mu2e::CrvDigis_*_*_*",
#    "keep mu2e::CRSScintillatorBarIndexmu2e::CrvPhotonsstd::map_CrvPhotons_*_*",
#    "keep mu2e::CRSScintillatorBarIndexmu2e::CrvSiPMChargesstd::map_CrvSiPMCharges_*_*",
    "keep mu2e::StatusG4_*_*_*",
    "keep mu2e::ProtonBunchIntensity_*_*_*",
    "keep art::TriggerResults_*_*_*",
    "keep mu2e::EventWindowMarker_*_*_*",
    "keep *_genCounter_*_*" ]

# mixing configuration
Mixing : {
  producers : {
    g4run : @local::mu2e.physics.producers.g4run.muons
    genCounter: { module_type: GenEventCounter }
    @table::CommonMC.producers
    @table::TrackerMC.producers
    @table::CaloDigiMC.producers
    @table::CrvDAQPackage.producers
    # proton bunch intensity
    protonBunchIntensity: {
      module_type: ProtonBunchIntensityLogNormal
      sigma: 0.3814
      extendedMean: 3.9e7 // mean of the uncut distribution
      cutMax: 11.7e7  // cut the tail at 3 times the mean
    }
   # tracker digis for primary selection
    makeSDPrimary : {
      module_type : StrawDigisFromStepPointMCs
      TimeOffsets   : { inputs : [ @sequence::CommonMC.TimeMapsPrimary ] }
    }
   # digi compression
    compressDigiMCs : {
      module_type : CompressDigiMCs
      strawDigiMCTag : "makeSD"
      crvDigiMCTag : "CrvWaveforms"
      simParticleTags : @nil 
      extraStepPointMCTags : [ "g4run:virtualdetector", "g4run:protonabsorber" ]
      timeMapTags : [ @sequence::CommonMC.TimeMaps ]
      caloShowerStepTags : [ "CaloShowerStepFromStepPt:calorimeter",
      			     "ootMixerTrkCal:calorimeter",
      			     "protonMixerTrkCal:calorimeter",
      			     "deuteronMixerTrkCal:calorimeter",
      			     "dioMixerTrkCal:calorimeter",
      			     "photonMixerTrkCal:calorimeter",
      			     "neutronMixerTrkCal:calorimeter",
      			     "flashMixerTrkCal:CaloShowerCrystalSteps"
      			   ]
      caloShowerSimTag : "CaloShowerStepROFromShowerStep"
      caloShowerStepROTag : "CaloShowerStepROFromShowerStep"
    }
  }
  filters : {
    # TrkCal mixing
    flashMixerTrkCal    : @local::mixerTemplateTrkCal
    ootMixerTrkCal      : @local::mixerTemplateTrkCal
    neutronMixerTrkCal  : @local::mixerTemplateTrkCal
    dioMixerTrkCal      : @local::mixerTemplateTrkCal
    photonMixerTrkCal   : @local::mixerTemplateTrkCal
    protonMixerTrkCal   : @local::mixerTemplateTrkCal
    deuteronMixerTrkCal : @local::mixerTemplateTrkCal
    # CRV mixing
    PSMixerCRV	     : @local::mixerTemplateCRV 
    TSMixerCRV	     : @local::mixerTemplateCRV 
    DSMixerCRV	     : @local::mixerTemplateCRV
    ootMixerCRV	     : @local::mixerTemplateCRV 
    neutronMixerCRV  : @local::mixerTemplateCRV 
    dioMixerCRV	     : @local::mixerTemplateCRV 
    photonMixerCRV   : @local::mixerTemplateCRV 
# digi filtering for Primary selection.
    DigiFilter : {
      module_type : StrawDigiMCFilter
      StrawDigiMCCollection : "makeSDPrimary"
    }
  }
  analyzers : {
    genCountLogger: {
      module_type: GenEventCountReader 
      makeHistograms: false
    }
  }
  Output : {
     module_type : RootOutput
     SelectEvents : [ TriggerPath ]
     fileName    : @nil
     outputCommands : @local::DigiCompressOutputCommands
  }
  # input time maps from cut mix inputs.  All are needed
  protonTimeMaps : [ "flashMixerTrkCal:protonTimeMap", "PSMixerCRV:protonTimeMap", "DSMixerCRV:protonTimeMap"]
  # sequences
  TrkCalMixSequence : [ flashMixerTrkCal,
    ootMixerTrkCal, neutronMixerTrkCal, dioMixerTrkCal,
    photonMixerTrkCal, protonMixerTrkCal, deuteronMixerTrkCal ]
  CRVMixSequence : [ PSMixerCRV, TSMixerCRV, DSMixerCRV,
    ootMixerCRV, neutronMixerCRV, dioMixerCRV, photonMixerCRV ]
  CreatePrimarySequence : [ generate, genCounter, g4run,
    @sequence::CommonMC.PrimaryDigiSim,
    makeSDPrimary, DigiFilter ]
}
Mixing.producers.compressDigiMCs.simParticleTags : [ "g4run", @sequence::Mixing.TrkCalMixSequence,
@sequence::Mixing.CRVMixSequence]

Mixing.MixSequence : [ protonBunchIntensity,
    @sequence::Mixing.TrkCalMixSequence,
    @sequence::Mixing.CRVMixSequence,
    @sequence::CommonMC.DigiSim,
    @sequence::TrackerMC.DigiSim,
    @sequence::CaloDigiMC.DigiSim,
    @sequence::CrvDAQPackage.CrvResponseSequence,
    compressDigiMCs ]

END_PROLOG
