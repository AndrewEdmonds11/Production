#
# Prolog specific to createing primary (signal, signal-like or calibration) particles
#
#include "JobConfig/beam/prolog.fcl"
#include "CommonMC/fcl/prolog.fcl"
#include "TrackerMC/fcl/prolog.fcl"
#include "CaloMC/fcl/prolog.fcl"
#include "Filters/fcl/prolog.fcl"
#
BEGIN_PROLOG

Primary: {
  producers : {
    g4run : @local::mu2e.physics.producers.g4run.muons
    genCounter: { module_type: GenEventCounter }
    @table::EventGenerator.producers
    @table::CommonMC.producers
    @table::TrackerMC.producers
    @table::CaloDigiMC.producers
# dedicated digi maker for filter
    makeSD:{
      @table::makeSD
      TimeOffsets : { inputs : [ @sequence::CommonMC.TimeMaps ] }
    }
# digi compression
    compressDigiMCs : {
      module_type : CompressDigiMCs
      strawDigiMCTag : "makeSD"
      crvDigiMCTag : ""
      simParticleTags : [ "g4run" ] 
      extraStepPointMCTags : [ "g4run:virtualdetector", "g4run:protonabsorber" ]
      timeMapTags : [ @sequence::CommonMC.TimeMaps ]
      primarySimPtrsTag : "DigiFilter"
      caloShowerStepTags : [ "CaloShowerStepFromStepPt:calorimeter", "CaloShowerStepFromStepPt:calorimeterRO" ]
      caloShowerSimTag : "CaloShowerStepROFromShowerStep"
      caloShowerStepROTag : "CaloShowerStepROFromShowerStep"
    }
  }
  filters : {
# digi filtering for Primary selection.
    DigiFilter : {
      module_type : StrawDigiMCFilter
      StrawDigiMCCollection : "makeSD"
    }
  }
  analyzers: {
    genCountLogger: { module_type: GenEventCountReader makeHistograms: false }
  }
  TriggerPath : [ generate, genCounter, g4run,
    @sequence::CommonMC.DigiSim,
    @sequence::TrackerMC.DigiSim,
    DigiFilter,
    @sequence::CaloDigiMC.DigiSim ]
  EndPath : [ genCountLogger, Output ]
  Output : {
     module_type : RootOutput
     SelectEvents : [ TriggerPath ]
     fileName    : @nil
     # drop StepPoints from calorimeter
    outputCommands : [
      "keep *_*_*_*",
      "drop *_g4run_calorimeter_*",
      "drop *_g4run_calorimeterRO_*"
    ] 
  }
}

Compress: {
  TriggerPathCompress : [ @sequence::Primary.TriggerPath, compressDigiMCs ]
  EndPathCompress : [ genCountLogger, OutputCompress ]
  OutputCompress : {
     module_type : RootOutput
     SelectEvents : [ TriggerPathCompress ]
     fileName : @nil
     outputCommands : [ "keep *_*_*_*",
     		      	"drop *_g4run_*_*",
			"drop *_CaloShowerStepFromStepPt_*_*",
			"drop *_CaloShowerStepROFromShowerStep_*_*"
		      ]
  }
}
END_PROLOG
