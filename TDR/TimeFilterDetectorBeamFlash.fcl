// Andrei Gaponenko, 2014

#include "minimalMessageService.fcl"
#include "standardProducers.fcl"
#include "standardServices.fcl"

# Give this job a name.
process_name : TimeFilterDetectorBeamFlash

source : { module_type : RootInput }

services : {
    TFileService          : { fileName : "histTimeFilterDetectorBeamFlash.root" }
    message               : @local::default_message
}

physics : {

    //================================================================
    producers: {
        trackerHits: {
	    module_type: SelectStepPointsByTime
	    input: "detectorFilter:tracker"
	    cutTimeMin: 200
	}

        caloHits: {
	    module_type: SelectStepPointsByTime
	    input: "detectorFilter:calorimeter"
	    cutTimeMin: 200
	}

        caloROHits: {
	    module_type: SelectStepPointsByTime
	    input: "detectorFilter:calorimeterRO"
	    cutTimeMin: 200
	}

        compressPVDetector: {
            module_type: CompressPhysicalVolumes
            volumesInput : "compressPVDetector"
            hitInputs : []
            particleInputs : [ "detectorFilter:s0" ]
        }
    } // producers

    //================================================================
    filters: {
        detectorFilter: {
            module_type: FilterG4Out
            mainHitInputs: [ "trackerHits", "caloHits", "caloROHits"]
            extraHitInputs: [ "detectorFilter:virtualdetector" ]
            numSimParticleCollections: 1
            vetoDaughters: []
        }
    }

    //================================================================
    analyzers: {
        genCountLogger: {
            module_type: GenEventCountReader
        }

        hitTimesTracker: {
            module_type: ExtremeHitTimes
	    inputs: [ "detectorFilter:tracker" ]
        }

        hitTimesCalo: {
            module_type: ExtremeHitTimes
	    inputs: [ "detectorFilter:calorimeter",  "detectorFilter:calorimeterRO" ]
        }

	// tracker or calo
        hitTimesTOC: {
            module_type: ExtremeHitTimes
	    inputs: [ "detectorFilter:tracker", "detectorFilter:calorimeter",  "detectorFilter:calorimeterRO" ]
        }
    }

    //================================================================
    detPath : [trackerHits, caloHits, caloROHits, detectorFilter, compressPVDetector]
    trigger_paths  : [detPath]

    out : [beamFlashOutput]
    an : [genCountLogger, hitTimesTracker, hitTimesCalo, hitTimesTOC]
    end_paths      : [out, an]
}

outputs: {
    beamFlashOutput : {
        module_type : RootOutput
        SelectEvents: { SelectEvents: [detPath] }
        outputCommands:   [ "drop *_*_*_*",
                            "keep mu2e::GenParticles_*_*_*",
                            "keep mu2e::GenEventCount_*_*_*",
                            "keep mu2e::StatusG4_*_*_*",
                            "keep *_detectorFilter_*_TimeFilterBeamFlash",
                            "keep *_compressPVDetector_*_TimeFilterBeamFlash"
                          ]
        fileName    : "detectorBeamFlash.root"
    }

    fullOutput : {
        module_type : RootOutput
        fileName    : "detectorBeamFlash_full.root"
    }
}

// We guarantee that our subruns are atomic. The following line is to not run out of memory.
services.scheduler.fileMode: MERGE
