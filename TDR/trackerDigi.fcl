#include "minimalMessageService.fcl"
#include "standardProducers.fcl"
#include "standardServices.fcl"

process_name : trackerDigi

source : { module_type : RootInput }

services : {
  message               : @local::default_message
  TFileService          : { fileName : "hist_trackerDigi.root" }
  RandomNumberGenerator : { }

  user : {
    GeometryService        : { inputFile      : "Mu2eG4/test/geom_01.txt" }
    ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt" }
    GlobalConstantsService : { inputFile      : "Mu2eG4/test/globalConstants_01.txt" }
    G4Helper               : { }
    SeedService            : @local::automaticSeeds
  }
}

physics : {

  producers:{
    protonTimeMap : { module_type : GenerateProtonTimes }
    muonTimeMap : { module_type : GenerateMuonLife verbosityLevel : 1 }
    makeSD         : @local::makeSD
    makeSH         : @local::makeSHfromSD
  }

  p1 : [protonTimeMap, muonTimeMap, makeSD, makeSH]
  e1 : [fullOutput]
  trigger_paths  : [p1]
  end_paths      : [e1]
}

outputs: {
  fullOutput : {
    module_type : RootOutput
    fileName    : "data_trackerDigi.root"
  }
}

physics.producers.makeSD.TimeOffsets :  { inputs : [ "protonTimeMap", "muonTimeMap" ] }
physics.producers.makeSH.printLevel : 0

source.firstRun                            :  1
services.SeedService.baseSeed         :  0
services.SeedService.maxUniqueEngines :  20
