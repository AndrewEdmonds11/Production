// Andrei Gaponenko, 2013
#include "minimalMessageService.fcl"
#include "standardProducers.fcl"
#include "standardServices.fcl"

# Give this job a name.
process_name : DS23ToStopsDetMothers

source : { module_type : RootInput }

services : {

    message               : @local::default_message
    TFileService          : { fileName : "histDS23ToStopsDetMothers.root" }
    RandomNumberGenerator : { }

    user : {
        GeometryService        : { inputFile      : "JobConfig/TDR/geom_DS23ToStopsDetMothers.txt" }
        ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt"      }
        GlobalConstantsService : { inputFile      : "Mu2eG4/test/globalConstants_01.txt" }
        G4Helper               : { }
        SeedService            : @local::automaticSeeds
    }
}

physics : {

    //================================================================
    producers: {

        g4run : {
            module_type          : G4
            inputSimParticles : "g4filter:s0"
            simParticleNumberOffset : 200000

            generatorModuleLabel : ""
            genInputHits : [ "g4filter:TS5Vacuum", "g4filter:DS2Vacuum", "g4filter:DS3Vacuum" ]

            doWriteLegacyPhysVolumeInfo : false
            inputPhysVolumeMultiInfoLabel : "compressPV"

            SDConfig : {
                enableSD : [ virtualdetector, CRV ] // activate just the explicitly listed SDs
                sensitiveVolumes: [ "TrackerMother", "CalorimeterMother" ]
                preSimulatedHits: ["g4filter:virtualdetector", "g4filter:CRV" ]
            }

            SimParticlePrinter : {
                enabled : false
                primariesOnly : false
                prefix : "SimParticle: "
            }
        }

        compressPVMothers: {
            module_type: CompressPhysicalVolumes
            volumesInput : "g4run"
            hitInputs : []
            particleInputs : [ "mothersFilter:s0" ]
        }

        compressPVStop: {
            module_type: CompressPhysicalVolumes
            volumesInput : "g4run"
            hitInputs : []
            particleInputs : [ "stopFilter:s0" ]
        }

        compressPVFull : {
            module_type: CompressPhysicalVolumes
            volumesInput : "g4run"
            hitInputs : []
            particleInputs : [ "g4run" ]
        }

        //----------------------------------------------------------------
        stoppedMuonFinder : {
            module_type : StoppedParticlesFinder
            particleInput : "g4run"
            // multiple matches, we'll get the one from the current process, which is what we want
            physVolInfoInput : "g4run"
            stoppingMaterial : "StoppingTarget_Al"
            particleTypes : [ 13 ] // mu-
            particleOffsetThreshold: 200000
            verbosityLevel: 1
        }

	stoppedMuonDaughters: {
            module_type: SimParticleDaughterSelector
            particleInput: "stoppedMuonFinder"
            // EMCascade should not be vetoed because we do not re-simulate it
            processes: [ "DIO", "NuclearCapture" ]
	}
 
        outOfTargetMuonFinder : {
            module_type : StoppedParticlesFinder
            particleInput : "g4run"
            physVolInfoInput : "g4run"
            vetoedMaterials : [ "StoppingTarget_Al" ]
            particleTypes : [ 13 ] // mu-
            particleOffsetThreshold: 200000
            verbosityLevel: 1
        }
	outOfTargetMuonDaughters: {
            module_type: SimParticleDaughterSelector
            particleInput: "outOfTargetMuonFinder"
            processes: [ "DIO", "NuclearCapture", "EMCascade" ]
	}

    } // producers

    //================================================================
    filters: {
        mothersFilter: {
            module_type: FilterG4Out
            mainHitInputs: [ "g4run:TrackerMother", "g4run:CalorimeterMother", "g4run:CRV"]
            extraHitInputs: [ "g4run:virtualdetector" ]
            numSimParticleCollections: 1
            vetoParticles: [ "stoppedMuonDaughters", "outOfTargetMuonDaughters" ] 
        }
        stopFilter: {
            module_type: FilterG4Out
            mainHitInputs: []
            extraHitInputs: [ "g4run:virtualdetector" ]
            mainSPPtrInputs: [ "stoppedMuonFinder", "outOfTargetMuonFinder" ]
            numSimParticleCollections: 1
        }
        g4status: {
            module_type: FilterStatusG4
            input: "g4run"
        }
    }

    //================================================================
    analyzers: {
        stoppedMuonDumper: {
            module_type: StoppedParticlesDumper
            inputCollection: "stoppedMuonFinder"
            writeProperTime : false
        }
	outOfTargetDumper: {
            module_type: StoppedParticlesDumper
            inputCollection: "outOfTargetMuonFinder"
            writeProperTime : false
        }

        genCountLogger: {
            module_type: GenEventCountReader
        }
    }


    //================================================================
    motherFilter: [ g4run,
                    stoppedMuonFinder, stoppedMuonDaughters, 
                    outOfTargetMuonFinder, outOfTargetMuonDaughters,
                    mothersFilter, compressPVMothers
    ]

    muonStopFilter :  [g4run, stoppedMuonFinder, outOfTargetMuonFinder, stopFilter, compressPVStop]
    g4StatusFilter :  [g4run, "!g4status", compressPVFull ]
    trigger_paths  : [motherFilter, muonStopFilter, g4StatusFilter]

    out : [mothersOutput, muonStopOutput, truncatedEvtsOutput]
    stops : [stoppedMuonDumper, outOfTargetDumper]
    gcl : [genCountLogger]
    end_paths      : [out, stops, gcl]
}

outputs: {
    mothersOutput : {
        module_type : RootOutput
        SelectEvents: { SelectEvents: [motherFilter] }
        outputCommands:   [ "drop *_*_*_*",
                            "keep mu2e::GenParticles_*_*_*",
                            "keep mu2e::GenEventCount_*_*_*",
                            "keep mu2e::StatusG4_*_*_*",
                            "keep *_mothersFilter_*_*",
                            "keep *_compressPVMothers_*_*"
                          ]
        fileName    : "beamFlashOnMothers.root"
    }

    muonStopOutput : {
        module_type : RootOutput
        SelectEvents: { SelectEvents: [muonStopFilter] }
        outputCommands:   [ "drop *_*_*_*",
                            "keep mu2e::GenParticles_*_*_*",
                            "keep mu2e::GenEventCount_*_*_*",
                            "keep mu2e::StatusG4_*_*_*",
                            "keep *_stoppedMuonFinder_*_*",
                            "keep *_outOfTargetMuonFinder_*_*",
                            "keep *_stopFilter_*_*",
                            "keep *_compressPVStop_*_*"
                          ]
        fileName    : "muonStops.root"
    }

    truncatedEvtsOutput : {
        module_type : RootOutput
        SelectEvents: { SelectEvents: [g4StatusFilter] }
        outputCommands:   [ "drop *_*_*_*",
                            "keep mu2e::GenParticles_*_*_*",
                            "keep mu2e::GenEventCount_*_*_*",
                            "keep mu2e::StatusG4_*_*_*",
                            "keep *_g4run_*_*",
                            "drop uintmu2e::PhysicalVolumeInfomvstd::pairs_*_*_*",
                            "keep *_compressPVFull_*_*"
                          ]
        fileName    : "truncatedDS23ToStopsDetMothers.root"
    }

    fullOutput : {
        module_type : RootOutput
        fileName    : "dataDS23ToStopsDetMothers_full.root"
    }
}

// Initialze seeding of random engines: do not put these lines in base .fcl files for grid jobs.
services.SeedService.baseSeed         :  0
services.SeedService.maxUniqueEngines :  20
