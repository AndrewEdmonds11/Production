#
#  Mix backgrounds and produce digis.  This assumes a primary input file, to run pure backgrounds override source to be
#  EmptyEvent.
#  Andrei Gaponenko,   3 Nov 2015
#  Dave Brown (LBNL) june 2018
#
#include "JobConfig/beam/prolog-bgFrameMixing.fcl"
#include "TrackerMC/fcl/prolog.fcl"
#include "EventMixing/fcl/prolog.fcl"
#include "CaloMC/fcl/prolog.fcl"
#include "CRVResponse/fcl/prolog_v07.fcl"
#include "fcl/standardServices.fcl"
#include "fcl/minimalMessageService.fcl"
#
process_name: digimix

services : @local::Services.Sim

source : {
  module_type : RootInput
  inputCommands : [ "drop *",
  "keep *_generate_*_*",
  "keep *_genCounter_*_*",
  "keep *_g4run_*_*",
  "keep *_TrkDigiFilter_*_*" ]
}

physics: {
   producers: {
      genCounter: { module_type: GenEventCounter }
      protonBunchIntensity: {
         module_type: ProtonBunchIntensitySimulator
         #
         # Use the log-normal model of Proton Beam Inensity fluctuations
         #
         IntensityModel: 2
         # IHEP data fit
         Lognormal_mu : -0.10015
         Lognormal_sigma : 0.3814
         MeanNumberOfProtonsPerMicrobunch: 3.9e7
      }

     @table::TrackerMC.producers
     @table::CaloDigiMC.producers
     @table::CrvDAQPackage.producers
     protonTimeMap: { module_type : GenerateProtonTimes }
     muonTimeMap: { module_type : GenerateMuonLife }

   }

   filters: {
     # TrkCal
      flashMixerTrkCal    : @local::mixerTemplateTrkCal
      ootMixerTrkCal      : @local::mixerTemplateTrkCal
      neutronMixerTrkCal  : @local::mixerTemplateTrkCal
      dioMixerTrkCal      : @local::mixerTemplateTrkCal
      photonMixerTrkCal   : @local::mixerTemplateTrkCal
      protonMixerTrkCal   : @local::mixerTemplateTrkCal
      deuteronMixerTrkCal : @local::mixerTemplateTrkCal
      # CRV
      PSMixerCRV	     : @local::mixerTemplateCRV 
      TSMixerCRV	     : @local::mixerTemplateCRV 
      DSMixerCRV	     : @local::mixerTemplateCRV
      ootMixerCRV	     : @local::mixerTemplateCRV 
      neutronMixerCRV        : @local::mixerTemplateCRV 
      dioMixerCRV	     : @local::mixerTemplateCRV 
      photonMixerCRV	     : @local::mixerTemplateCRV 
      #
   }

   analyzers: {
      genCountLogger: { module_type: GenEventCountReader makeHistograms: false }
   }

   # trigger path
   p1: [ 
      #genCounter,
      protonBunchIntensity,
      flashMixerTrkCal,
      ootMixerTrkCal, neutronMixerTrkCal, dioMixerTrkCal,
      photonMixerTrkCal, protonMixerTrkCal, deuteronMixerTrkCal,
      PSMixerCRV, TSMixerCRV, DSMixerCRV,
      ootMixerCRV, neutronMixerCRV, dioMixerCRV, photonMixerCRV,
      @sequence::EventMixing.TimeMaps,
      @sequence::TrackerMC.DigiSim,
      @sequence::CaloDigiMC.DigiSim,
      @sequence::CrvDAQPackage.CrvResponseSequence
   ]
   e1: [genCountLogger, Output]

}

outputs: {
   Output : {
      module_type : RootOutput
      fileName    : @nil
   }
}
# MDC2018 values 
# TrkCal
physics.filters.flashMixerTrkCal.mu2e.meanEventsPerProton    : 9.75E-04 # low stats FIXME!
physics.filters.ootMixerTrkCal.mu2e.meanEventsPerProton      : 2.4185E-05
physics.filters.neutronMixerTrkCal.mu2e.meanEventsPerProton  : 1.8790E-05
physics.filters.dioMixerTrkCal.mu2e.meanEventsPerProton      : 3.8434E-06
physics.filters.photonMixerTrkCal.mu2e.meanEventsPerProton   : 8.6966E-06
physics.filters.protonMixerTrkCal.mu2e.meanEventsPerProton   : 7.4322E-07
physics.filters.deuteronMixerTrkCal.mu2e.meanEventsPerProton : 1.6261E-07
# CRV
physics.filters.ootMixerCRV.mu2e.meanEventsPerProton	  : 4.5379E-06
physics.filters.neutronMixerCRV.mu2e.meanEventsPerProton  : 3.6173E-07
physics.filters.dioMixerCRV.mu2e.meanEventsPerProton      : 3.2816E-07
physics.filters.photonMixerCRV.mu2e.meanEventsPerProton   : 1.3449E-07
physics.filters.PSMixerCRV.mu2e.meanEventsPerProton	  : 9.5035E-05
physics.filters.TSMixerCRV.mu2e.meanEventsPerProton	  : 2.4368E-06
physics.filters.DSMixerCRV.mu2e.meanEventsPerProton	  : 2.8126E-04
# fixes
physics.filters.flashMixerTrkCal.mu2e.products.genParticleMixer: { mixingMap: [ [ "flashResample", "" ] ] }
physics.filters.PSMixerCRV.mu2e.products.genParticleMixer: { mixingMap: [ [ "crvFilter", "" ] ] }
physics.filters.TSMixerCRV.mu2e.products.genParticleMixer: { mixingMap: [ [ "crvFilter", "" ] ] }
physics.filters.DSMixerCRV.mu2e.products.genParticleMixer: { mixingMap: [ [ "crvFilter", "" ] ] }

outputs.Output.fileName: "mix.owner.digimix.version.sequencer.art"


