// Andrei Gaponenko, 2013

#include "minimalMessageService.fcl"
#include "standardProducers.fcl"
#include "standardServices.fcl"

# Give this job a name.
process_name : pionsg4s2

source : { module_type : RootInput }

services : {

    message               : @local::default_message
    TFileService          : { fileName : "hist_pions_g4s2.root" }
    RandomNumberGenerator : { }

    user : {
        GeometryService        : { inputFile      : "JobConfig/TDR/geom_pions_g4s2.txt" }
        ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt"      }
        GlobalConstantsService : { inputFile      : "Mu2eG4/test/globalConstants_01.txt" }
        G4Helper               : { }
        SeedService            : @local::automaticSeeds
    }
}

physics : {
    producers: {

        g4run : {
            module_type          : G4
            inputSimParticles : "g4filter:s0"
            simParticleNumberOffset : 100000 // safe b/c of g4.particlesSizeLimit in stage1

            generatorModuleLabel : ""
            genInputHits : [ "g4filter:TS3Vacuum" ]

            doWriteLegacyPhysVolumeInfo : false
            inputPhysVolumeMultiInfoLabel : "compressPV"

            SDConfig : {
                enableSD : [ virtualdetector ] // activate just the explicitly listed SDs
                sensitiveVolumes: [ DS2Vacuum, DS3Vacuum ]
                preSimulatedHits: ["g4filter:virtualdetector",
                                   "g4filter:DS2Vacuum",
                                   "g4filter:DS3Vacuum"]
            }

            SimParticlePrinter : {
                enabled : false
                primariesOnly : false
                prefix : "SimParticle: "
            }
        }

        compressPV : {
            module_type: CompressPhysicalVolumes
            volumesInput : "g4run"
            hitInputs : []
            particleInputs : [ "g4filter:s0" ]
        }
    }

    filters: {
        g4filter: {
            module_type: FilterG4Out
            mainHitInputs : [ "g4run:DS2Vacuum", "g4run:DS3Vacuum"]
            extraHitInputs : [ "g4run:virtualdetector" ]
            numSimParticleCollections : 1
            vetoDaughters: []
        }
    }

    analyzers: {
        genCountLogger: {
            module_type: GenEventCountReader
        }
    }

    trigFilter : [g4run, g4filter, compressPV]
    trigger_paths  : [trigFilter]

    e1 : [filteredOutput, genCountLogger]
    end_paths      : [e1]
}

outputs: {
    filteredOutput : {
        module_type : RootOutput
        SelectEvents: { SelectEvents: ["trigFilter"] }
        outputCommands:   [ "drop *_*_*_*",
                            "keep mu2e::GenParticles_*_*_*",
                            "keep mu2e::GenEventCount_*_*_*",
                            "keep mu2e::StatusG4_*_*_*",
                            "keep *_g4filter_*_pionsg4s2",
                            "keep *_g4filter_TS3Vacuum_*",
                            "keep *_compressPV_*_pionsg4s2"
                          ]
        fileName    : "data_pions_g4s2.root"
    }
}

// Initialze seeding of random engines: do not put these lines in base .fcl files for grid jobs.
services.user.SeedService.baseSeed         :  0
services.user.SeedService.maxUniqueEngines :  20
