// Andrei Gaponenko, 2015
#include "minimalMessageService.fcl"
#include "standardProducers.fcl"
#include "standardServices.fcl"

# Give this job a name.
process_name : beamg4s3

source : { module_type : RootInput }

services : {

   message               : @local::default_message
   TFileService          : { fileName : "nts.owner.cd3-beam-g4s3.version.sequencer.root" }
   RandomNumberGenerator : { }

   user : {
      GeometryService        : { inputFile      : "JobConfig/cd3/geom_baseline.txt" }
      ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt"      }
      GlobalConstantsService : { inputFile      : "Mu2eG4/test/globalConstants_01.txt" }
      G4Helper               : { }
      SeedService            : @local::automaticSeeds
   }
}

physics : {

   //================================================================
   producers: {
      g4run : {
         module_type: Mu2eG4
         physics: @local::mu2eg4DefaultPhysics
         ResourceLimits: @local::mu2eg4DefaultResourceLimits
	 TrajectoryControl: @local::mu2eg4NoTrajectories
         debug:  @local::mu2eg4DefaultDebug
         visualization: @local::mu2eg4NoVisualization

	 MultiStageParameters : {
            simParticleNumberOffset: 200000  // safe b/c of g4.particlesSizeLimit in stage1
            genInputHits:  [ "muonBeamFilter:DSVacuum" ]
            inputSimParticles: "muonBeamFilter"
	    inputMCTrajectories: ""
            inputPhysVolumeMultiInfo: "compressPVmuonBeam"
	 }

         SDConfig : {
            enableSD : [ virtualdetector ] // activate just the explicitly listed SDs
            preSimulatedHits: ["muonBeamFilter:virtualdetector"]
	    TimeVD: { times: [] }
         }

         Mu2eG4StackingOnlyCut: @local::mu2eg4CutNeutrinos

         Mu2eG4SteppingOnlyCut: {}

         Mu2eG4CommonCut: {
	    type: inVolume
	    pars: [TrackerMother, CalorimeterMother]
	    write: DetectorMother
	 }

         SimParticlePrinter : {
            enabled : false
            primariesOnly : false
            prefix : "SimParticle: "
         }
      }

      compressPVMothers: {
         module_type: CompressPhysicalVolumes
         volumesInput : "g4run"
         hitInputs : []
         particleInputs : [ "mothersFilter" ]
      }

      compressPVStop: {
         module_type: CompressPhysicalVolumes
         volumesInput : "g4run"
         hitInputs : []
         particleInputs : [ "stopFilter" ]
      }

      compressPVFull : {
         module_type: CompressPhysicalVolumes
         volumesInput : "g4run"
         hitInputs : []
         particleInputs : [ "g4run" ]
      }

      //----------------------------------------------------------------
      stoppedMuonFinder : {
         module_type : StoppedParticlesFinder
         particleInput : "g4run"
         // multiple matches, we'll get the one from the current process, which is what we want
         physVolInfoInput : "g4run"
         stoppingMaterial : "StoppingTarget_Al"
         particleTypes : [ 13 ] // mu-
         particleOffsetThreshold: 200000
         verbosityLevel: 1
      }

      stoppedMuonDaughters: {
         module_type: SimParticleDaughterSelector
         particleInput: "stoppedMuonFinder"
         // EMCascade should not be vetoed because we do not re-simulate it
         processes: [ "DIO", "NuclearCapture" ]
      }
      
      outOfTargetMuonFinder : {
         module_type : StoppedParticlesFinder
         particleInput : "g4run"
         physVolInfoInput : "g4run"
         vetoedMaterials : [ "StoppingTarget_Al" ]
         particleTypes : [ 13 ] // mu-
         particleOffsetThreshold: 200000
         verbosityLevel: 1
      }

      outOfTargetMuonDaughters: {
         module_type: SimParticleDaughterSelector
         particleInput: "outOfTargetMuonFinder"
         // We do re-simulate EMCascade for out of target stops
         processes: [ "DIO", "NuclearCapture", "EMCascade" ]
      }

   } // producers

   //================================================================
   filters: {
      mothersFilter: {
         module_type: FilterG4Out
	 noInstanceName : true
         mainHitInputs: [ "g4run:DetectorMother" ]
         extraHitInputs: [ "g4run:virtualdetector" ]
         numSimParticleCollections: 1
         vetoParticles: [ "stoppedMuonDaughters", "outOfTargetMuonDaughters" ] 
      }
      stopFilter: {
         module_type: FilterG4Out
	 noInstanceName : true
         mainHitInputs: []
         extraHitInputs: [ "g4run:virtualdetector" ]
         mainSPPtrInputs: [ "stoppedMuonFinder", "outOfTargetMuonFinder" ]
         numSimParticleCollections: 1
      }
      g4status: {
         module_type: FilterStatusG4
         input: "g4run"
      }

      g4consistent: {
         module_type: FilterStatusG4
         input: "g4run"
	 maxAcceptedStatus: 9  #  status 10 and above means StepPointMCCollection may have non-dereferencable pointers
      }
   }

   //================================================================
   analyzers: {
      genCountLogger: {
         module_type: GenEventCountReader
      }
   }


   //================================================================
   motherFilter: [ g4run,
      stoppedMuonFinder, stoppedMuonDaughters, 
      outOfTargetMuonFinder, outOfTargetMuonDaughters,
      mothersFilter, compressPVMothers
   ]

   muonStopFilter :  [g4run, g4consistent, stoppedMuonFinder, outOfTargetMuonFinder, stopFilter, compressPVStop]
   g4StatusFilter :  [g4run, "!g4status", compressPVFull ]
   trigger_paths  : [motherFilter, muonStopFilter, g4StatusFilter]

   out : [mothersOutput, muonStopOutput, truncatedEvtsOutput]
   gcl : [genCountLogger]
   end_paths      : [out, gcl]
}

outputs: {
   mothersOutput : {
      module_type : RootOutput
      SelectEvents: { SelectEvents: [motherFilter] }
      outputCommands:   [ "drop *_*_*_*",
         "keep mu2e::GenParticles_*_*_*",
         "keep mu2e::GenEventCount_*_*_*",
         "keep mu2e::StatusG4_*_*_*",
         "keep *_mothersFilter_*_*",
         "keep *_compressPVMothers_*_*"
      ]
      fileName    : "sim.owner.cd3-beam-g4s3-mothers.version.sequencer.art"
   }

   muonStopOutput : {
      module_type : RootOutput
      SelectEvents: { SelectEvents: [muonStopFilter] }
      outputCommands:   [ "drop *_*_*_*",
         "keep mu2e::GenParticles_*_*_*",
         "keep mu2e::GenEventCount_*_*_*",
         "keep mu2e::StatusG4_*_*_*",
         "keep *_stoppedMuonFinder_*_*",
         "keep *_outOfTargetMuonFinder_*_*",
         "keep *_stopFilter_*_*",
         "keep *_compressPVStop_*_*"
      ]
      fileName    : "sim.owner.cd3-beam-g4s3-stops.version.sequencer.art"
   }

   truncatedEvtsOutput : {
      module_type : RootOutput
      SelectEvents: { SelectEvents: [g4StatusFilter] }
      outputCommands:   [ "drop *_*_*_*",
         "keep mu2e::GenParticles_*_*_*",
         "keep mu2e::GenEventCount_*_*_*",
         "keep mu2e::StatusG4_*_*_*",
         "keep *_g4run_*_*",
         "drop uintmu2e::PhysicalVolumeInfomvstd::pairs_*_*_*",
         "keep *_compressPVFull_*_*"
      ]
      fileName    : "sim.owner.cd3-beam-g4s3-truncated.version.sequencer.art"
   }
}

// Limit the amount of "Begin processing the ... record" messages
services.message.destinations.log.categories.ArtReport.reportEvery : 1
services.message.destinations.log.categories.ArtReport.limit : 1
services.message.destinations.log.categories.ArtReport.timespan : 300

physics.producers.g4run.physics.minRangeCut : 1. // mm

// Initialze seeding of random engines: do not put these lines in base .fcl files for grid jobs.
services.user.SeedService.baseSeed         :  0
services.user.SeedService.maxUniqueEngines :  20
