// Andrei Gaponenko, 2013

#include "minimalMessageService.fcl"
#include "standardProducers.fcl"
#include "standardServices.fcl"

# Give this job a name.
process_name : MothersToHits

source : { module_type : RootInput }

services : {

    message               : @local::default_message
    TFileService          : { fileName : "histMothersToHits.root" }
    RandomNumberGenerator : { }

    user : {
        GeometryService        : { inputFile      : "JobConfig/TDR/geom_MothersToHits.txt" }
        ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt"      }
        GlobalConstantsService : { inputFile      : "Mu2eG4/test/globalConstants_01.txt" }
        G4Helper               : { }
        SeedService            : @local::automaticSeeds
    }
}

physics : {

    //================================================================
    producers: {

        g4run : {
            module_type          : G4
            inputSimParticles : "mothersFilter:s0"
            // det mother hits from stopped muons have an extra stage
            // compared to beam flash files.  Skip one stage block of numbers
            // here as well.
            simParticleNumberOffset : 400000

            generatorModuleLabel : ""
            genInputHits : [ "mothersFilter:TrackerMother", "mothersFilter:CalorimeterMother" ]

            doWriteLegacyPhysVolumeInfo : false
            inputPhysVolumeMultiInfoLabel : "compressPVMothers"

            SDConfig : {
                // do not want e.g. the "stoppingtarget" SD, thus do not use enableAllSDs
                // Instead explicitly list all the detectors we want
                enableSD : [ tracker, calorimeter, calorimeterRO, CRV, virtualdetector ]
                sensitiveVolumes: []
                preSimulatedHits: ["mothersFilter:virtualdetector", "mothersFilter:CRV" ]
            }

            SimParticlePrinter : {
                enabled : false
                primariesOnly : false
                prefix : "SimParticle: "
            }
        }

        compressPVDetector: {
            module_type: CompressPhysicalVolumes
            volumesInput : "g4run"
            hitInputs : []
            particleInputs : [ "detectorFilter:s0" ]
        }

        compressPVCRV: {
            module_type: CompressPhysicalVolumes
            volumesInput : "g4run"
            hitInputs : []
            particleInputs : [ "crvFilter:s0" ]
        }

        compressPVFull : {
            module_type: CompressPhysicalVolumes
            volumesInput : "g4run"
            hitInputs : []
            particleInputs : [ "g4run" ]
        }
    } // producers

    //================================================================
    filters: {
        detectorFilter: {
            module_type: FilterG4Out
            mainHitInputs: [ "g4run:tracker", "g4run:calorimeter", "g4run:calorimeterRO"]
            extraHitInputs: [ "g4run:virtualdetector" ]
            numSimParticleCollections: 1
            vetoDaughters: []
        }
        crvFilter: {
            module_type: FilterG4Out
            mainHitInputs: [ "g4run:CRV" ]
            extraHitInputs: [ "g4run:virtualdetector" ]
            numSimParticleCollections: 1
            vetoDaughters: []
        }
        g4status: {
            module_type: FilterStatusG4
            input: "g4run"
        }
    }

    //================================================================
    analyzers: {
        genCountLogger: {
            module_type: GenEventCountReader
        }
    }


    //================================================================
    detPath : [g4run, detectorFilter, compressPVDetector]
    crvPath :       [g4run, crvFilter, compressPVCRV]
    g4StatusFilter :  [g4run, "!g4status", compressPVFull ]
    trigger_paths  : [detPath, crvPath, g4StatusFilter]

    out : [beamFlashOutput, crvOutput, truncatedEvtsOutput]
    an : [genCountLogger]
    end_paths      : [out, an]
}

outputs: {
    beamFlashOutput : {
        module_type : RootOutput
        SelectEvents: { SelectEvents: [detPath] }
        outputCommands:   [ "drop *_*_*_*",
                            "keep mu2e::GenParticles_*_*_*",
                            "keep mu2e::GenEventCount_*_*_*",
                            "keep mu2e::StatusG4_*_*_*",
                            "keep *_detectorFilter_*_*",
                            "keep *_compressPVDetector_*_*"
                          ]
        fileName    : "detectorBeamFlash.root"
    }

    crvOutput : {
        module_type : RootOutput
        SelectEvents: { SelectEvents: [crvPath] }
        outputCommands:   [ "drop *_*_*_*",
                            "keep mu2e::GenParticles_*_*_*",
                            "keep mu2e::GenEventCount_*_*_*",
                            "keep mu2e::StatusG4_*_*_*",
                            "keep *_crvFilter_*_*",
                            "keep *_compressPVCRV_*_*"
                          ]
        fileName    : "crvBeamFlash.root"
    }

    truncatedEvtsOutput : {
        module_type : RootOutput
        SelectEvents: { SelectEvents: [g4StatusFilter] }
        outputCommands:   [ "drop *_*_*_*",
                            "keep mu2e::GenParticles_*_*_*",
                            "keep mu2e::GenEventCount_*_*_*",
                            "keep mu2e::StatusG4_*_*_*",
                            "keep *_g4run_*_*",
                            "drop uintmu2e::PhysicalVolumeInfomvstd::pairs_*_*_*",
                            "keep *_compressPVFull_*_*"
                          ]
        fileName    : "truncatedMothersToHits.root"
    }

    fullOutput : {
        module_type : RootOutput
        fileName    : "dataMothersToHits_full.root"
    }
}

// Initialze seeding of random engines: do not put these lines in base .fcl files for grid jobs.
services.user.SeedService.baseSeed         :  0
services.user.SeedService.maxUniqueEngines :  20
