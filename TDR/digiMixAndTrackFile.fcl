// Read an input file with StepPointMCs (usually for signal or signal-like tracks),
// overlay background hits using standard pre-mixed files,
// run tracker digitization and reconstruction.
//
// To specify background hit files for grid submissions, add the
//
//     --fclinput=1:@bgHitFiles:/mu2e/data/tdr/beam/mixp3/filelist.txt
//
// option to mu2eart command line.
//
// An example of analyzing one file (1000 generated conversions):
//
//     ls /mu2e/data/tdr/beam/g4s4p5/tdr.beam.g4s4.conversion.1504a.15729672/good/00000/dsStopsToHitsConversion.root > filelist.txt
//
//     mu2eart --setup=setup.sh  --fclinput=1:@bgHitFiles:/mu2e/data/tdr/beam/mixp3/filelist.txt --inputs=filelist.txt --fcl=JobConfig/TDR/digiMixFile.fcl --njobs=1
//
// For interactive tests, uncomment the
// following PROLOG definition of bgHitFiles.  DO NOT LEAVE IT UNCOMMENTED, as it
// will cause grid jobs to silently use the same file over and over again.
//
// Andrei Gaponenko, 2014

//test: // This must be commented out for production.
//test: BEGIN_PROLOG
//test: bgHitFiles : [ "/mu2e/data/tdr/beam/mixp3/tdr.beam.mix.bg.1516a.15409268/good/00000/data_mixBG.root"]
//test: END_PROLOG

#include "minimalMessageService.fcl"
#include "standardProducers.fcl"
#include "standardServices.fcl"

BEGIN_PROLOG
mixerTemplate: {
   module_type         : MixMCEvents
   fileNames           : @local::bgHitFiles
   readMode            : randomReplace
   wrapFiles           : true
   coverageFraction    : 1000000.
   detail : {
      mean                : -1
      genModuleLabel      : @nil
      g4ModuleLabel       : @nil
      g4StatusTag         : ""
      stepInstanceNames   : @local::stepInstanceNames
      doPointTrajectories : false
   }
}
END_PROLOG

process_name: digiMixFile

source: { module_type: RootInput }

services : {
   message: @local::default_message
   TFileService: { fileName : "hist_digiMixAndTrackFile.root" }
   RandomNumberGenerator: { }
   user: {
      GeometryService        : { inputFile      : "JobConfig/TDR/geom_MothersToHits.txt" }
      ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt"      }
      GlobalConstantsService : { inputFile      : "Mu2eG4/test/globalConstants_01.txt" }
      SeedService: @local::automaticSeeds
   }
}

physics: {

   filters: {
      flashMixer   : @local::mixerTemplate
      ootMixer     : @local::mixerTemplate
      dioMixer     : @local::mixerTemplate
      neutronMixer : @local::mixerTemplate
      photonMixer  : @local::mixerTemplate
      protonMixer  : @local::mixerTemplate

      simParticleFilter: {
         module_type: FilterG4Out
         mainHitInputs : []
         extraHitInputs : [
            "detectorFilter:virtualdetector",
            "flashMixer:virtualdetector", "ootMixer:virtualdetector", "dioMixer:virtualdetector",
            "neutronMixer:virtualdetector", "photonMixer:virtualdetector", "protonMixer:virtualdetector"
         ]
         mainSPPtrInputs: [ "TSTMDownstreameMinusTmp", "TSTMUpstreameMinusTmp" ]
         vetoDaughters: []
         compressGenParticles: true

         simParticleIOMap : [
            {in : "detectorFilter:s0"    out : "signal" },
            {in : "flashMixer:s0"        out : "flash" },
            {in : "ootMixer:s0"          out : "oot" },
            {in : "dioMixer:s0"          out : "dio" },
            {in : "neutronMixer:s0"      out : "neutron" },
            {in : "photonMixer:s0"       out : "photon" },
            {in : "protonMixer:s0"       out : "proton" }
         ]
      }
   }

   producers: {
      protonTimeMap: { module_type : GenerateProtonTimes }
      muonTimeMap: { module_type : GenerateMuonLife }
      makeSD: @local::makeSD
      makeSH: @local::makeSHfromSD
      FSHPreStereo: @local::FSHPreStereo
      MakeStereoHits: @local::MakeStereoHits
      FlagStrawHits: @local::FlagStrawHits
      FlagBkgHits: @local::FlagBkgHits

      TPRDownstreameMinus: @local::TrkPatRecDownstreameMinus
      TSMDownstreameMinus: {
         module_type: TrackSummaryMaker
         trackInput: "TPRDownstreameMinus:DownstreameMinus"
      }
      TSTMDownstreameMinusTmp: {
         module_type: TrackSummaryTruthMaker
         recoMapInput: "TSMDownstreameMinus"
         strawHitDigiMCInput: "makeSH:StrawHitMC"
         minPrincipalHits : 1
         minAllHits: 2
      }
      TSTMDownstreameMinus: {
         module_type: TrackSummaryTruthUpdater
         remapping: simParticleFilter
         inputTST: TSTMDownstreameMinusTmp
      }

      TPRUpstreameMinus: @local::TrkPatRecUpstreameMinus
      TSMUpstreameMinus: {
         module_type: TrackSummaryMaker
         trackInput: "TPRUpstreameMinus:UpstreameMinus"
      }
      TSTMUpstreameMinusTmp: {
         module_type: TrackSummaryTruthMaker
         recoMapInput: "TSMUpstreameMinus"
         strawHitDigiMCInput: "makeSH:StrawHitMC"
         minPrincipalHits : 1
         minAllHits: 2
      }
      TSTMUpstreameMinus: {
         module_type: TrackSummaryTruthUpdater
         remapping: simParticleFilter
         inputTST: TSTMUpstreameMinusTmp
      }

      protonTimeMapCompressed: {
         module_type: SimParticleTimeMapUpdater
         remapping: simParticleFilter
         inputTimeCollection: protonTimeMap
      }

      muonTimeMapCompressed: {
         module_type: SimParticleTimeMapUpdater
         remapping: simParticleFilter
         inputTimeCollection: muonTimeMap
      }

   }

   analyzers: {
      genCountLogger: { module_type: GenEventCountReader }
      RKFDownstreameMinus: {
         module_type: ReadKalFits
         fitterModuleLabel: TPRDownstreameMinus
      }
   }

   p1: [
      dioMixer, protonMixer, neutronMixer, photonMixer, ootMixer, flashMixer,
      protonTimeMap, muonTimeMap, makeSD, makeSH, FSHPreStereo,
      MakeStereoHits, FlagStrawHits, FlagBkgHits,
      TPRDownstreameMinus, TSMDownstreameMinus, TSTMDownstreameMinusTmp,
      TPRUpstreameMinus, TSMUpstreameMinus, TSTMUpstreameMinusTmp,
      simParticleFilter,
      protonTimeMapCompressed, muonTimeMapCompressed,
      TSTMDownstreameMinus, TSTMUpstreameMinus
   ]

   trigger_paths: [p1]

   e1: [ genCountLogger, RKFDownstreameMinus]
   out: [summaryOutput]
   end_paths      : [e1, out]
}

outputs: {
   summaryOutput : {
      module_type : RootOutput
      fileName    : "recoSummary.root"
      SelectEvents: { SelectEvents: [p1] }
      outputCommands: [
         "drop *_*_*_*",
         "keep mu2e::GenEventCount_*_*_*",
         "keep uintmu2e::PhysicalVolumeInfomvstd::pairs_*_*_*",
         "keep mu2e::StatusG4_*_*_*",
         "keep mu2e::TrackSummarys_*_*_*",
         "keep mu2e::*_simParticleFilter_*_*",
         "keep *_protonTimeMapCompressed_*_*",
         "keep *_muonTimeMapCompressed_*_*",
         "keep *_TSTMDownstreameMinus_*_*",
         "keep *_TSTMUpstreameMinus_*_*"
      ]
   }
}

// Apply the time offsets in tracker digitization
physics.producers.makeSD.TimeOffsets :  { inputs : [ "protonTimeMap", "muonTimeMap" ] }

physics.filters.flashMixer.detail.genModuleLabel   :  flashMixer
physics.filters.ootMixer.detail.genModuleLabel     :  ootMixer
physics.filters.dioMixer.detail.genModuleLabel     :  dioMixer
physics.filters.neutronMixer.detail.genModuleLabel :  neutronMixer
physics.filters.photonMixer.detail.genModuleLabel  :  photonMixer
physics.filters.protonMixer.detail.genModuleLabel  :  protonMixer

physics.filters.flashMixer.detail.g4ModuleLabel   :  flashMixer
physics.filters.ootMixer.detail.g4ModuleLabel     :  ootMixer
physics.filters.dioMixer.detail.g4ModuleLabel     :  dioMixer
physics.filters.neutronMixer.detail.g4ModuleLabel :  neutronMixer
physics.filters.photonMixer.detail.g4ModuleLabel  :  photonMixer
physics.filters.protonMixer.detail.g4ModuleLabel  :  protonMixer

services.user.SeedService.baseSeed         :  0
services.user.SeedService.maxUniqueEngines :  20
