#
#  Prolog for production reconstruction jobs
#
#include "TrkHitReco/fcl/prolog.fcl"
#include "TrkReco/fcl/prolog.fcl"
#include "TrkPatRec/fcl/prolog.fcl"
#include "CalPatRec/fcl/prolog.fcl"
#include "CommonMC/fcl/prolog.fcl"
#include "Filters/fcl/prolog.fcl"
#
BEGIN_PROLOG
Reconstruction : {
  producers : {
    @table::TrkHitReco.producers
    @table::Tracking.producers
    @table::CalPatRec.producers
    @table::CaloReco.producers
    @table::CaloCluster.producers
    @table::CrvResponsePackage.producers
    # instantiate explicit helix merger modules: this should be in TrkReco/prolog FIXME!
    # NB: positive here refers to helicity, not charge!
    MHDeM : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders : [ "HelixFinderDe:Positive", "CalHelixFinderDe:Positive" ]
    }
    MHDeP : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders : [ "HelixFinderDe:Negative", "CalHelixFinderDe:Negative" ]
    }
    MHDmuM : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders : [ "HelixFinderDmu:Positive" , "CalHelixFinderDmu:Positive" ]
    }
    MHDmuP : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders : [ "HelixFinderDmu:Negative", "CalHelixFinderDmu:Negative" ]
    }
    KSFDeM : {
      @table::Tracking.producers.KSFDeM
      SeedCollection             : MHDeM
      AlgorithmIDCollection      : MHDeM
    }
    KSFDeP : {
      @table::Tracking.producers.KSFDeP
      SeedCollection             : MHDeP
      AlgorithmIDCollection      : MHDeP
    }
    KSFDmuM : {
      @table::Tracking.producers.KSFDmuM
      SeedCollection             : MHDmuM
      AlgorithmIDCollection      : MHDmuM
    }
    KSFDmuP : {
      @table::Tracking.producers.KSFDmuP
      SeedCollection             : MHDmuP
      AlgorithmIDCollection      : MHDmuP
    }
    # Implicit TrkPatRec config for Final Fits and upstream fits (no merging)
    # MC specific: this should be in a separate fcl file FIXME!
    FindMCPrimary : { 
      @table::CommonMC.FindMCPrimary
      TimeOffsets : [ "compressDigiMCs:protonTimeMap", "compressDigiMCs:muonTimeMap" ]
    }
    SelectRecoMC : { 
      @table::CommonMC.SelectRecoMC 
       CSSCollection : "compressDigiMCs"
       CaloClusterMCDTime : 2.0
       CaloMinE : 1.0
       TimeOffsets : [ "compressDigiMCs:protonTimeMap", "compressDigiMCs:muonTimeMap" ]
#debugLevel : 2
       PrimaryParticle : "FindMCPrimary"
       CaloClusterCollection : "CaloClusterFromProtoCluster"
       CrvCoincidenceClusterCollection : "CrvCoincidenceClusterFinder"
       StrawDigiMCCollection : "compressDigiMCs"
       CrvDigiMCCollection : "compressDigiMCs"
       KFFInstances  : ["KFFDeM", "KFFDeP", "KFFDmuM", "KFFDmuP",
"KFFUeM", "KFFUeP", "KFFUmuM", "KDDUmuP" ]
      VDSPCollection : "compressDigiMCs:virtualdetector"
    }
    # calo fix: only need for MDC2018e and earlier
    CaloMCFix : { @table::DigiCompression.CaloFix 
      	caloShowerStepTags : [ "compressDigiMCs" ]
	caloShowerSimTag : "compressDigiMCs"
	caloShowerStepROTag : "compressDigiMCs"
    }
    # Compresion
    compressRecoMCs : { @table::DigiCompression.Reco
      strawDigiMCTag : "compressDigiMCs"
      crvDigiMCTag : "compressDigiMCs"
      simParticleTags : [ "compressDigiMCs" ]
      extraStepPointMCTags : [ "compressDigiMCs:virtualdetector", "compressDigiMCs:protonabsorber" ]
      timeMapTags : [ "compressDigiMCs:protonTimeMap", "compressDigiMCs:muonTimeMap" ]
      caloClusterMCTag : "SelectRecoMC"
      strawDigiMCIndexMapTag : "SelectRecoMC:StrawDigiMCMap"
      crvDigiMCIndexMapTag : "SelectRecoMC:CrvDigiMCMap"
      keepAllGenParticles : false
      crvCoincClusterMCTag : "CrvCoincidenceClusterMatchMC"
      primaryParticleTag : "FindMCPrimary"
    }
  }
  
  filters : {
# why are CalPatRec reconstruction modules implemented as filters????
# This could have unexpected downstream consequences FIXME!
    @table::CalPatRec.filters
    # reco filter
    RecoFilter : {
      module_type   : RecoMomFilter
      KalFinalTagRoot : ""
      TrkTags : [ "KFFDeM", "KFFDeP", 
	          "KFFUeM", "KFFUeP", 
		  "KFFDmuM", "KFFDmuP", 
	          "KFFUmuM", "KFFUmuP"
		]
      MomentumCutoff : [ 90.0, 80.0,
			 80.0, 80.0,
			 90.0, 80.0,
			 80.0, 80.0 ]
    }
  }

  analyzers : {
    RecoCheck : { @table::DigiCompression.RecoCheck
      oldStrawDigiMCTag : "compressDigiMCs"
      newStrawDigiMCTag : "compressRecoMCs"
      OldTimeOffsets : { inputs : [ "compressDigiMCs:protonTimeMap", "compressDigiMCs:muonTimeMap" ] }
      NewTimeOffsets : { inputs : [ "compressRecoMCs:protonTimeMap", "compressRecoMCs:muonTimeMap" ] }
      strawDigiMCIndexMapTag : "SelectRecoMC:StrawDigiMCMap"
      oldCrvDigiMCTag : "compressDigiMCs"
      newCrvDigiMCTag : "compressRecoMCs"
      crvDigiMCIndexMapTag : "SelectRecoMC:CrvDigiMCMap"
      oldCaloShowerSimTag : "CaloFix"
      newCaloShowerSimTag : "compressRecoMCs"
    }
  }
# reconstruct multiple types of tracks.  These are separate sequences to allow granular execution
# Downstream electron sequence (plus and minus), using merged helices
  DeSequence : [
    TimeClusterFinderDe, HelixFinderDe,  # TrkPatRec
    CalTimePeakFinder, CalHelixFinderDe,  # CalPatRec
    MHDeM, MHDeP, # helix merging
    KSFDeM, KSFDeP, # Seed fit (chisquared, no drift)
    KFFDeM, KFFDeP # final Kalman filter fit
  ]
# Upstream electron sequence (plus and minus): TrkPatRec only
  UeSequence : [
    TimeClusterFinderUe, HelixFinderUe,   
    KSFUeM, KSFUeP, # Seed fit (chisquared, no drift)
    KFFUeM, KFFUeP # final Kalman filter fit
  ]
# Downstream muon sequence (plus and minus)
  DmuSequence : [
    TimeClusterFinderDmu, HelixFinderDmu,  # TrkPatRec
    CalTimePeakFinderMu, CalHelixFinderDmu,  # CalPatRec
    MHDmuM, MHDmuP, # helix merging
    KSFDmuM, KSFDmuP, # Seed fit (chisquared, no drift)
    KFFDmuM, KFFDmuP # final Kalman filter fit
  ]
# Upstream muon sequence (plus and minus)
  UmuSequence : [
    TimeClusterFinderUmu, HelixFinderUmu,   
    KSFUmuM, KSFUmuP, # Seed fit (chisquared, no drift)
    KFFUmuM, KFFUmuP # final Kalman filter fit
  ]
# Other sequences
  CaloRecoSequence : [ @sequence::CaloReco.Reco,
			@sequence::CaloCluster.Reco ]
#    TrkCaloMatchSequence : [ @sequence::TrackCaloMatching.matching_dem_TRF, 
#                         @sequence::TrackCaloMatching.matching_dep_TRF ]
  CrvRecoSequence : [ CrvRecoPulses, CrvCoincidence, CrvCoincidenceClusterFinder ]
# full MC sequence
  RecoMCSequence :  [ CaloMCFix, FindMCPrimary,  CrvCoincidenceClusterMatchMC, SelectRecoMC, compressRecoMCs ]

#define output products 
# Calo and CRV should be defined elswehere, FIXME!
# separate MC info FIXME!
 # define reco products to keep
  ToKeep : [@sequence::Tracking.Output.Digis,
	    @sequence::Tracking.Output.Tracks,
#	    @sequence::Tracking.Output.MCDigis,
#	    @sequence::Tracking.Output.MCHits,
#	    @sequence::Tracking.Output.MCTracks,
	    "keep *_compressRecoMCs_*_*",
	    "keep mu2e::CaloDigis_*_*_*",
	    "keep mu2e::CaloClusters_*_*_*",
	    "keep mu2e::CrvDigis_*_*_*",
	    "keep mu2e::CrvCoincidenceClusters_*_*_*",
#	    @sequence::CaloReco.Output,
#	    @sequence::CRVReco.Output,
	    # add trigger output products FIXME!
#	    @sequence::TriggerReco.Output,
	    "keep mu2e::StatusG4_*_*_*",
            "keep art::TriggerResults_*_*_*",
	    "keep mu2e::EventWindowMarker_*_*_*",
	    "keep *_genCounter_*_*",
	    "keep mu2e::EventWeight_*_*_*",
	    "keep mu2e::ProtonBunchIntensity_*_*_*",
	    "keep *_FindMCPrimary_*_*",
	    "keep *_SelectRecoMC_*_*",
	    "keep *_FlagBkgHits_StrawHits_*",
	    "keep *_CrvCoincidenceClusterMatchMC_*_*",
#	    "keep mu2e::TriggerInfoCollection",
	    "keep mu2e::*_TriggerAlg_*_*" ]
}
# must define some things outside the brackets due to internal dependence
#
# Aggregate to a full TrkRecoSequence (depends on CaloRecoSequence)
Reconstruction.TrkRecoSequence : [
    @sequence::TrkHitReco.PrepareHits, # Track hit
    @sequence::Reconstruction.DeSequence,
    @sequence::Reconstruction.UeSequence,
    @sequence::Reconstruction.DmuSequence,
    @sequence::Reconstruction.UmuSequence
]
#
# Define paths; this allows for granularity in jobs without
# any performance cost, since the same module instances are used.
Reconstruction.DePath : [
  @sequence::TrkHitReco.PrepareHits, # Track hit
  @sequence::Reconstruction.CaloRecoSequence, # CaloReco needs to preceed TrkReco
  @sequence::Reconstruction.DeSequence # tracking
]
Reconstruction.UePath : [
  @sequence::TrkHitReco.PrepareHits, # Track hit
  @sequence::Reconstruction.CaloRecoSequence, # CaloReco needs to preceed TrkReco
  @sequence::Reconstruction.UeSequence # tracking
]
Reconstruction.DmuPath : [
  @sequence::TrkHitReco.PrepareHits, # Track hit
  @sequence::Reconstruction.CaloRecoSequence, # CaloReco needs to preceed TrkReco
  @sequence::Reconstruction.DmuSequence # tracking
]
Reconstruction.UmuPath : [
  @sequence::TrkHitReco.PrepareHits, # Track hit
  @sequence::Reconstruction.CaloRecoSequence, # CaloReco needs to preceed TrkReco
  @sequence::Reconstruction.UmuSequence # tracking
]

# Full reconstruction Path
Reconstruction.RecoPath : [
  @sequence::Reconstruction.CaloRecoSequence, # CaloReco needs to preceed TrkReco
  @sequence::Reconstruction.TrkRecoSequence,
  @sequence::Reconstruction.CrvRecoSequence 
]
# Full reco path with MC
Reconstruction.RecoMCPath : [
  @sequence::Reconstruction.RecoPath,
  @sequence::Reconstruction.RecoMCSequence,
  RecoFilter
]
#
Reconstruction.Output : {
  module_type : RootOutput
  SelectEvents : [ RecoPath ]
  fileName    : @nil
  outputCommands : [ "drop *_*_*_*",
#  outputCommands : [ "keep *_*_*_*",
  @sequence::Reconstruction.ToKeep ]
}


END_PROLOG
