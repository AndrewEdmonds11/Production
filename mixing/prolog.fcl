# common parts used in all mixing jobs

#include "fcl/minimalMessageService.fcl"
#include "fcl/standardServices.fcl"
#include "TrackerMC/fcl/prolog.fcl"
#include "EventMixing/fcl/prolog.fcl"
#include "CaloMC/fcl/prolog.fcl"
#include "EventGenerator/fcl/prolog.fcl"
#include "Mu2eG4/fcl/prolog.fcl"
#include "CRVResponse/fcl/prolog.fcl"
#include "CommonMC/fcl/prolog.fcl"
#include "JobConfig/beam/prolog.fcl"

BEGIN_PROLOG

#----------------------------------------------------------------
mixerTemplateCommon: {
   module_type         : MixBackgroundFrames
   fileNames           : @nil
#     sequential -- read the secondary events in order
#     randomReplace -- random with replacement
#     randomLimReplace -- events unique within a primary event
#     randomNoReplace -- events guaranteed to be used once only.
#   readMode            : randomNoReplace
   readMode            : randomLimReplace
   wrapFiles           : true

   mu2e: {
      protonBunchIntensityTag: "protonBunchIntensity"
      meanEventsPerProton: @nil
      products: @nil
   }
}

#----------------------------------------------------------------
mixerTemplateTrkCal: @local::mixerTemplateCommon
mixerTemplateTrkCal.mu2e.products: {
   genParticleMixer: { mixingMap: [ [ "generate", "" ] ] }
   simParticleMixer: { mixingMap: [ [ "detectorFilter", "" ] ] }
   stepPointMCMixer: { mixingMap:
      [
	 [ "detectorFilter:tracker", ":" ],
	 [ "detectorFilter:virtualdetector", ":" ],
	 [ "detectorFilter:protonabsorber", ":" ]
      ]
   }
   caloShowerStepMixer: { mixingMap:
      [
	 [ "CaloShowerCrystalSteps", "calorimeter" ],
	 [ "CaloShowerROSteps", "calorimeterRO" ]
      ]
   }
}
#----------------------------------------------------------------
mixerTemplateCRV: @local::mixerTemplateCommon
mixerTemplateCRV.mu2e.products: {
   genParticleMixer: { mixingMap: [ [ "generate", "" ] ] }
   simParticleMixer: { mixingMap: [ [ "crvFilter", "" ] ] }
   stepPointMCMixer: { mixingMap:
      [
	 [ "crvFilter:CRV", ":" ]
      ]
   }
}
# flash cut configuration
CRVCut : { module_type : CompressStepPointMCs
	 			    stepPointMCTags : [ "crvFilter:CRV" ]
				    caloShowerStepTags : [ ]
				    simParticleTag : "crvFilter"
				    minTime : 350
				    maxTime : 1695
				    minEdep : 10.0e-6
				    maxEdep : 1.0e6
				    timeMapTags : [ "protonTimeMap" ]
				    diagLevel : 0
     				  }

DigiCompressOutputCommands : [ "drop *_*_*_*",
    "keep *_compressDigiMCs_*_*",
    "keep mu2e::StrawDigis_*_*_*",
    "keep mu2e::CaloDigis_*_*_*",
    "keep mu2e::CaloShowerSteps_*_*_*",
    "keep mu2e::CaloShowerStepROs_*_*_*",
    "keep mu2e::SimParticleart::Ptrs_CaloShowerStepFromStepPt_*_*",
    "keep mu2e::CaloShowerSims_*_*_*",
    "keep mu2e::CrvDigis_*_*_*",
    "keep mu2e::CRSScintillatorBarIndexmu2e::CrvPhotonsstd::map_CrvPhotons_*_*",
    "keep mu2e::CRSScintillatorBarIndexmu2e::CrvSiPMChargesstd::map_CrvSiPMCharges_*_*",
    "keep mu2e::StatusG4_*_*_*",
    "keep mu2e::ProtonBunchIntensity_*_*_*",
    "keep art::TriggerResults_*_*_*",
    "keep *_genCounter_*_*" ]
# drop the pre-filter straw digis
#     "drop *_makeSDPreFilter_*_*" ]

# mixing configuration
Mixing : {
  producers : {
    g4run : @local::mu2e.physics.producers.g4run.muons
    genCounter: { module_type: GenEventCounter }
    @table::EventGenerator.producers
    # dedicated digi maker for filter
    protonTimeMapPreFilter: { module_type : GenerateProtonTimes }
    muonTimeMapPreFilter: { module_type : GenerateMuonLife }
    makeSDPreFilter:{
      @table::makeSD
      TimeOffsets : {
	inputs : [ "protonTimeMapPreFilter", "muonTimeMapPreFilter" ]
      }
    }
    # digi compression
    compressDigiMCs : {
      module_type : CompressDigiMCs
      strawDigiMCTag : "makeSD"
      crvDigiMCTag : "CrvWaveforms"
      simParticleTags : @nil 
      extraStepPointMCTags : [ "g4run:virtualdetector", "g4run:protonabsorber" ]
      timeMapTags : [ "protonTimeMap", "muonTimeMap" ]
      primarySimPtrsTag : "TrkDigiFilter"
    }
    @table::CommonDigiSim.producers
    @table::TrackerMC.producers
    @table::CaloDigiMC.producers
    @table::CrvDAQPackage.producers
  }
  filters : {
    # TrkCal
    flashMixerTrkCal    : @local::mixerTemplateTrkCal
    ootMixerTrkCal      : @local::mixerTemplateTrkCal
    neutronMixerTrkCal  : @local::mixerTemplateTrkCal
    dioMixerTrkCal      : @local::mixerTemplateTrkCal
    photonMixerTrkCal   : @local::mixerTemplateTrkCal
    protonMixerTrkCal   : @local::mixerTemplateTrkCal
    deuteronMixerTrkCal : @local::mixerTemplateTrkCal
    # CRV
    PSMixerCRV	     : @local::mixerTemplateCRV 
    TSMixerCRV	     : @local::mixerTemplateCRV 
    DSMixerCRV	     : @local::mixerTemplateCRV
    ootMixerCRV	     : @local::mixerTemplateCRV 
    neutronMixerCRV  : @local::mixerTemplateCRV 
    dioMixerCRV	     : @local::mixerTemplateCRV 
    photonMixerCRV   : @local::mixerTemplateCRV 
    # digi filtering for signal selection.
    TrkDigiFilter : {
      module_type : StrawDigiMCFilter
      MinNDigis : 10
      StrawDigiMCCollection : "makeSDPreFilter"
    }
  }
  analyzers : {
    genCountLogger: {
      module_type: GenEventCountReader 
      makeHistograms: false
    }
  }
  MixOutput : {
     module_type : RootOutput
     SelectEvents : [ TriggerPath ]
     fileName    : @nil
     outputCommands : @local::DigiCompressOutputCommands
  }
  # time maps for cut mix inputs.  All are needed
  protonTimeMaps : [ "flashMixerTrkCal:protonTimeMap", "PSMixerCRV:protonTimeMap", "DSMixerCRV:protonTimeMap"]
  # sequences
  TrkCalMixSequence : [ flashMixerTrkCal,
    ootMixerTrkCal, neutronMixerTrkCal, dioMixerTrkCal,
    photonMixerTrkCal, protonMixerTrkCal, deuteronMixerTrkCal ]
  CRVMixSequence : [ PSMixerCRV, TSMixerCRV, DSMixerCRV,
    ootMixerCRV, neutronMixerCRV, dioMixerCRV, photonMixerCRV ]
  CreatePrimarySequence : [ generate, genCounter, g4run,
    protonTimeMapPreFilter, muonTimeMapPreFilter, EWMProducer,
    makeSDPreFilter,
    TrkDigiFilter ]
}
Mixing.producers.compressDigiMCs.simParticleTags : [ "g4run", @sequence::Mixing.TrkCalMixSequence,
@sequence::Mixing.CRVMixSequence]

Mixing.MixSequence : [ protonBunchIntensity,
    @sequence::Mixing.TrkCalMixSequence,
    @sequence::Mixing.CRVMixSequence,
    @sequence::CommonDigiSim.DigiSim,
    @sequence::TrackerMC.DigiSim,
    @sequence::CaloDigiMC.DigiSim,
    @sequence::CrvDAQPackage.CrvResponseSequence,
    compressDigiMCs ]

END_PROLOG
